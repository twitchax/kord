[package]
name = "kord-web"
version = "0.2.0"
edition = "2021"
authors = ["Aaron Roney <twitchax@gmail.com>"]
description = "Example project showing off Leptos with Axum, running as a `wasi:http` service."

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
leptos = { version = "0.7.0", features = ["nightly"] }
leptos_router = { version = "0.7.0", features = ["nightly"] }
# Scoped down due to https://github.com/rust-lang/rust/issues/130323.
axum = { version = "0.7", default-features = false, features = [
    "json",
    "matched-path",
    "original-uri",
    "tower-log",
    "tracing",
    "form",
    "query",
], optional = true }
console_error_panic_hook = { version = "0.1", optional = true }
# Tell leptos_axum to use a wasm-friendly executor.
leptos_axum = { version = "0.7.0", default-features = false, features = [
    "wasm",
], optional = true }
leptos_meta = { version = "0.7.0" }
# Scoped down to minimal set.
tokio = { version = "1", default-features = false, features = [
    "sync",
    "rt",
    "time",
], optional = true }
wasm-bindgen = { version = "=0.2.100", optional = true }
wasi = { version = "0.14.2+wasi-0.2.4", optional = true }
tower = { version = "0.5.2", optional = true }
futures = { version = "0.3.31", optional = true }
rust-embed = { version = "8.5.0", features = [
    "debug-embed",
    "mime-guess",
], optional = true }

[features]
hydrate = ["dep:console_error_panic_hook", "dep:wasm-bindgen", "leptos/hydrate"]
ssr = [
    "dep:axum",
    "dep:tokio",
    "dep:leptos_axum",
    "dep:tower",
    "dep:wasi",
    "dep:futures",
    "dep:rust-embed",
    "leptos/ssr",
    "leptos_meta/ssr",
    "leptos_router/ssr",
]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "kord-web"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
